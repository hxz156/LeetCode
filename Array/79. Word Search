class Solution {
    	public boolean exist(char[][] board, String word) {
		if(board.length==0 || board==null) return false;

		char[] word_char = word.toCharArray();
		boolean[][] visited = new boolean[board.length][board[0].length];

        	for(int i=0; i<board.length; i++){
			for(int j=0; j<board[0].length; j++){
				if (search(i, j, board, word_char, visited, 0)) return true;
			}
		}	
		return false;
    	}
	
	public boolean search(int i, int j, char[][] board, char[] word_char, boolean[][] visited, int count){
		if(count == word_char.length) return true;
		if(i<0 || j<0 || i>=board.length || j>=board[0].length || visited[i][j]==true || board[i][j]!=word_char[count]) return false;
		visited[i][j]=true;
		boolean search_more =( 	search(i-1, j, board, word_char, visited, count+1) ||
							search(i, j-1, board, word_char, visited, count+1) ||
							search(i+1, j, board, word_char, visited, count+1) ||
							search(i, j+1, board, word_char, visited, count+1) 
						);
		visited[i][j]=false;
		return search_more;
	}
}
//-----------------------------------(accept)
利用 dfs(depth first search) ， 多练习。
class Solution {
    	public int[] productExceptSelf(int[] nums) {
        	
		int[] result = new int[nums.length];
		result[0] = 1;
		for(int i=1; i<nums.length; i++){
			result[i] = result[i-1]*nums[i-1];
		}
		int right = 1;
		for(int i=nums.length-2; i>=0; i--){
			right = right*nums[i+1];
			result[i] = result[i]*right;
		}
		return result;

    	}
}//--------------------(accept)
这里保证 space complexity is o(1) since don't use any additional array for our computations. The problem statement mentions that using the answer array doesn't add to the space complexity
//----------------------------------
class Solution {
    	public int[] productExceptSelf(int[] nums) {
		int n = nums.length;
        	int[] left = new int[n];
		int[] right = new int[n];
		int[] result = new int[n];

		left[0] = 1;
		for(int i=1; i<n; i++){
			left[i] = left[i-1] * nums[i-1];
		}
		right[n-1] = 1;
		for(int i=n-2; i>-1; i--){
			right[i] = right[i+1] * nums[i+1];
		}

		for(int i=0; i<n; i++){
			result[i] = left[i] * right[i];
		}
		return result;
    	}
}
//----------------
简单，再练习就行了。
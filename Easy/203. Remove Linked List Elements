/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    	public ListNode removeElements(ListNode head, int val) {
		if(head == null) return null;
		ListNode dummy = new ListNode(-1);
       	dummy.next = head;
		ListNode cur = dummy;
		while(cur.next!=null){
			if(cur.next.val == val){
				cur.next= cur.next.next;
			}else{
				cur = cur.next;
			}
		}
		return dummy.next;
    	}
}
//--------------------------------------------------(accept)
只用一个 pointer 
dummy 存在的意义是假如我们第一个 head 就是要删除的情况。

//-----------------------------------------------------

class Solution {
    	public ListNode removeElements(ListNode head, int val) {
        	if(head == null) return null;

		ListNode dummy = new ListNode(-1);
		dummy.next = head;
		ListNode left = dummy, right = left.next;

		while(right != null){
			if(right.val == val){
				left.next = right.next;
			}else{
				left = left.next;
			}
			right = left.next;
		}
		return dummy.next;
    	}
}
//-------------------------------------------------------------(accept)
两个 pointer 

if(right.val == val)	如果下一个是要删除的，移除下一个

//--------------------------------------------------------
public ListNode removeElements(ListNode head, int val) {
        if (head == null) return null;
        head.next = removeElements(head.next, val);
        return head.val == val ? head.next : head;
}
//-----------------------------------------------

Recursive 的解法。



















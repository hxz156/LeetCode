class Solution {
    	public void merge(int[] nums1, int m, int[] nums2, int n) {
        	System.arraycopy(nums2, 0, nums1, m,n);
		Arrays.sort(nums1);
    	}
}

//------------------(accept)
利用 System.arraycopy(nums2, 0, nums1, m,n);
Time complexity : O((n+m)log(n+m)).
Space complexity : O(1). 

//-------------------------
class Solution {
    	public void merge(int[] nums1, int m, int[] nums2, int n) {
        	int i = m-1;
		int j = n-1;
		int cur = m+n-1;
		while(i>=0 && j>=0 && cur>=0){
			if(nums1[i]>nums2[j]){
				nums1[cur] = nums1[i];
				i--;
			}else{
				nums1[cur] = nums2[j];
				j--;
			}
			cur--;
		}
		System.arraycopy(nums2, 0, nums1, 0, j+1);
    	}
}
//-----------------------------------(accept)
从后面开始比较，复制 ； 注意最后还得把 nums 里面的复制过去。因为存在 nums2 复制不完的情况， nums1 太大了

Time complexity : O(n+m).
Space complexity : O(1).





class Solution {
    	public boolean isAnagram(String s, String t) {
        	int[] store = new int[26];
		if(s.length() != t.length()) return false;

		for(int i=0; i<s.length(); i++){
			store[s.charAt(i) - 'a']++;
			store[t.charAt(i) - 'a']--;
		}
		for(int i : store){
			if(i != 0) return false;
		}
		return true;
    	}
}
//------------------------------------------------------(accept)(good)
利用 hash table

//-------------------------------------------------------
class Solution {
    	public boolean isAnagram(String s, String t) {
        	char[] s_char = s.toCharArray();
		char[] t_char = t.toCharArray();
		Arrays.sort(s_char);
		Arrays.sort(t_char);
		return Arrays.equals(s_char, t_char);
    	}
}
//------------------------------------(accept)

先转换成 array ， 再排序， 再用 Arrays.equals()

//--------------------------------------------------------
class Solution {
    	public boolean isAnagram(String s, String t) {
        	List<Character> list = new ArrayList<>();
		for(char c : s.toCharArray()){
			list.add(c);
		}

		for(char c : t.toCharArray()){
			if(!list.contains(c)) return false;
			list.remove((Character)c);
		}
		return list.size()==0;
    	}
}
//-----------------------------------(accept)

list.remove((Character)c)		remove 本来就是默认 index, 所以回去的时候一定要把他变成一个 object
class Solution {
    	public int climbStairs(int n) {
		if(n <= 2) return n;

		int left=1 , right=2, sum=0, stair = 2;

		while(stair < n){
			sum = left + right;
			left = right;
			right = sum;
			stair++;
		}
		return sum;
    	}

}
//----------------------------------------(accept)
The key intuition to solve the problem is that given a number of stairs n, if we know the number ways to get to the points [n-1] and [n-2] respectively, then the total ways to get to the point [n] is n1 + n2.

没有用 recursive , 直接 for loop 三个 var 就搞定。

但是如果我就想用 recursive  

//----------------------------------------------
class Solution {
   	public int climbStairs(int n) {
		int memo[] = new int[n + 1];

       	return helper(n, memo);
    	}
	
	public int helper(int n, int[] memo){
		if(n <= 2) return memo[n] = n;

		if(memo[n] > 0) return memo[n];

		return memo[n] = helper(n - 1, memo) + helper(n - 2, memo);
	}
	
}
//-----------------------------------------(accept)
用的 recursive , 但是需要一个 array 去记录已经出现过的。否则 run time limit 























class Solution {
    	public int[] intersect(int[] nums1, int[] nums2) {
        	Arrays.sort(nums1);
		Arrays.sort(nums2);
		List<Integer> list = new ArrayList<>();
		int i=0, j=0;
		while(i<nums1.length && j<nums2.length){
			if(nums1[i] == nums2[j]){	
				list.add(nums1[i]);
				i++;
				j++;
			}
			else if(nums1[i] > nums2[j]){		j++;	}
			else if(nums1[i] < nums2[j]){		i++;	}
		}
		int[] ans = new int[list.size()];
		int count = 0;
		for(Integer temp : list){
			ans[count] = (int) temp;
			count++;
		}
		return ans;
    	}
}
//---------------------------------------------------------(accept)
faster than 91.23%  less than 91.12%

先 sort ， 然后两个 pointer 分别指，相等就储存然后移动，或者比大小移动。

What if elements of nums2 are stored on disk, and the memory is
limited such that you cannot load all elements into the memory at
once?

If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.

If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.

External Sort (https://blog.csdn.net/a130737/article/details/44136583)  
class Solution {
    	public List<String> generateParenthesis(int n) {
        	
		List<String> result = new ArrayList();
		backTrack(result,"",0, 0, n);
		return result;

    	}
	public void backTrack(List<String> result, String cur, int left, int right, int n){
		if(cur.length() == 2*n){
			result.add(cur);
			return;
		}
		if(left< n){
			backTrack(result, cur+"(", left+1, right, n);
		}
		if(right < left){
			backTrack(result, cur+")", left, right+1, n);
		}

	}

}
//-----------------------------(accept)
利用 recursion 
The way I like to think about the runtime of backtracking algorithms is O(b^d), where b is the branching factor and d is the maximum depth of recursion.

Backtracking is characterized by a number of decisions b that can be made at each level of recursion. If you visualize the recursion tree, this is the number of children each internal node has. You can also think of b as standing for "base", which can help you remember that b is the base of the exponential.

If we can make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie: each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit each one of these nodes, the runtime is O(b^d).
//--------------
(Solution)
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        backtrack(ans, "", 0, 0, n);
        return ans;
    }

    public void backtrack(List<String> ans, String cur, int open, int close, int max){
        if (cur.length() == max * 2) {
            ans.add(cur);
            return;
        }

        if (open < max)
            backtrack(ans, cur+"(", open+1, close, max);
        if (close < open)
            backtrack(ans, cur+")", open, close+1, max);
    }
}
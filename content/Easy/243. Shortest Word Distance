class Solution {
    	public int shortestDistance(String[] words, String word1, String word2) {
        	int i1=-1, i2=-1;
		int min = words.length;

		for(int i=0; i<words.length; i++){
			if(words[i].equals(word1) )	i1 = i;
			if(words[i].equals(word2) )	i2 = i;

			if(i1!=-1 && i2!=-1) min = Math.min(min, Math.abs(i2-i1));
		}
		return min;
    	}
}
//----------------------------------------------------------(accept)
faster than 100.00%		 less than 99.79%

找到对应的字母，如果都有，先计算出当下的距离，然后和最小的比较。

当我们找到一个新的时候，如果覆盖了远的，那么一定比远的短。如果没有，也没有关系，我们已经计算了一次。

假如两个位置 k1, k2 是最短的，上面的方法一定能够经过 k1, k2 的时候，所以一定能够算出来。



















/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        	ListNode result = new ListNode(-1);
		ListNode dummy = result;
		int val1, val2;
		while(l1!=null && l2!=null){
			if(l1.val < l2.val){
				dummy.next = new ListNode(l1.val);
				dummy = dummy.next;
				l1 = l1.next;
			}else{
				dummy.next = new ListNode(l2.val);
				dummy = dummy.next;
				l2 = l2.next;
			}
		}
		if(l1!=null) dummy.next = l1;
		if(l2!=null)	dummy.next = l2;
		return result.next;
		
    	}
}
//-------------------------------(accept)
自己的方法，一次过

//--------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        	if(l1 == null) return l2;
		if(l2 == null) return l1;
		if(l1.val < l2.val){
			l1.next = mergeTwoLists(l1.next, l2);	
			return l1;
		}else{
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
    	}
}
//----------------------------------------(accept)
很有意思的一个 recursive 方法

//------------






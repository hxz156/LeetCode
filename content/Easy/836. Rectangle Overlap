class Solution {
    	public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
        	
		int x1_left 	= rec1[0];
		int x1_right 	= rec1[2];
		int y1_top		= rec1[1];
		int y1_bottom	= rec1[3];

		int x2_left	= rec2[0];
		int x2_right	= rec2[2];
		int y2_top		= rec2[1];
		int y2_bottom	= rec2[3];
		
		if(x1_left <= x2_left && x1_left <= x2_right
			&& x1_right<=x2_left && x1_right <=x2_right) return false;

		if(x1_left >= x2_left && x1_left >= x2_right
			&& x1_right>=x2_left && x1_right >=x2_right) return false;

		if(y1_top <= y2_top && y1_top <= y2_bottom
			&& y1_bottom<=y2_top && y1_bottom <= y2_bottom) return false;

		if(y1_top >= y2_top && y1_top >= y2_bottom
			&& y1_bottom>=y2_top && y1_bottom >= y2_bottom) return false;

		return true;
    	}
}
//--------------------------------------(accept)
faster than 100.00% 		less than 100.00%

我老是想要去找他们相交的情况和规律，那些规律复杂。
这里就很简单，比较 x 和 y ， 一个正方形必须是在另一个的 上面，下面，左边，右边。 所以有一个维度是远远超过另一个的范围的。
思路重要性.

[x1, y1, x2, y2], where (x1, y1) are the coordinates of its bottom-left corner, and (x2, y2) are the coordinates of its top-right corner.

题目中有这个条件，所以我们 if statement 不需要这么长，因为他的 range 直接就得到了。
下面是优化：
//----------------------------------------------------------------------
class Solution {
    	public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
        	int x1_left 	= rec1[0];
		int x1_right 	= rec1[2];
		int y1_top		= rec1[3];
		int y1_bottom	= rec1[1];

		int x2_left	= rec2[0];
		int x2_right	= rec2[2];
		int y2_top		= rec2[3];
		int y2_bottom	= rec2[1];

		if(x1_right <= x2_left || x1_left >= x2_right

			|| y1_top <= y2_bottom || y1_bottom >= y2_top) return false;

		return true;

    	}
}
//--------------------------------------------------------------------(accept)
faster than 100.00%		less than 100.00%










































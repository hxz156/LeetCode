class Solution {
    	public int countPrimes(int n) {
		if(n <=2) return 0;
		if(n==3) return 1;
		boolean[] not_prime = new boolean[n];
		int count = 0;
	
        	for(int i=2; i<n; i++){
			if(not_prime[i]==false) count++;
			for(int j=2; i*j<n; j++){
				not_prime[i*j] = true;
			}
		}
		return count;
    	}
}
//--------------------------------------------------(accept)

还不是特别能够理解透。


//--------------------------------------------------------
class Solution {
    	public int countPrimes(int n) {
		if(n <= 2) return 0;
		if(n == 3) return 1;
		int count = 2;
        	for(int i=4; i<n; i++){
			if(is_prime(i) ) count++;
		}
		return count;
    	}
	
	public boolean is_prime(int n){
		int sq =(int) Math.sqrt(n);

		for(int i=2; i<=sq; i++){
			if(n % i == 0) return false;
		}
		return true;
	}
}
//------------------------------------------------(accept)

for(int i=2; i<=sq; i++)	要小于等于，因为这是比较中间前面那一部分，等于很重要

int count = 2;		从 i=4 的时候开始算，因为2 和 3 都比较特殊。 3 用我的 method 没法判断
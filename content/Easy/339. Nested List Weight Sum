/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    	public int depthSum(List<NestedInteger> nestedList) {
        	return sumOfList(nestedList, 1);
    	}

	public int sumOfList(List<NestedInteger> nestedList, int level){
		int sum = 0;
		for(NestedInteger cur_list : nestedList){
			if(cur_list.isInteger()){
				sum += cur_list.getInteger() * level;
			}else{
				sum += sumOfList(cur_list.getList() , level + 1);
			}
		}
		return sum;
	}
}
//---------------------------------------------------------------------(accept)
faster than 100.00% 		less than 100.00%
dfs
利用 recursive , sumOfList() 就是计算出当前这个的 总数，然后一层一层套下去。


The algorithm takes O(N) time, where N is the total number of nested elements in the input list. For example, the list [ [[[[1]]]], 2 ] contains 4 nested lists and 2 nested integers (1 and 2), so N=6.

In terms of space, at most O(D) recursive calls are placed on the stack, where D is the maximum level of nesting in the input. For example, D=2 for the input [[1,1],2,[1,1]], and D=3 for the input [1,[4,[6]]].

sum += sumOfList(cur_list.getList() , level + 1);		注意这里不需要再 * level，因为只是计算加法，当是数字的时候，一定是已经 乘 了对应的 level 才出来的。


















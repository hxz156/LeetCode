class Solution {
    	public int numIslands(char[][] grid) {
		if(grid == null || grid.length==0) return 0;

        	int row = grid.length;
		int column = grid[0].length;
		int island = 0;
		

		for(int i=0; i<row; i++){
			for(int j=0; j<column; j++){
				if(grid[i][j] == '1'){
					island++;
					dfs(i, j, grid);
				}
			}
		}
		return island;
    	}

	 public void dfs(int row, int column, char[][]grid){
		if(row<0 || column<0 || row>=grid.length || column>=grid[0].length || grid[row][column]=='0') return;
		
		// change all '1' around it to '0'
		if(grid[row][column] == '1'){
			grid[row][column] = '0';
			dfs(row, column+1, grid);
			dfs(row+1, column, grid);
			dfs(row-1, column, grid);
			dfs(row, column-1, grid);
		}
	}
}

//-----------------------------------------------------(accept)
faster than 100.00%	less than 99.52%

Time complexity : O(M×N) where M is the number of rows and N is the number of columns.

Space complexity : worst case O(M×N) in case that the grid map is filled with lands where DFS goes by M×N deep

用 dfs ， 找到一个 ‘1’，然后遍历所有的附近的，把‘1’ 转变成 ‘0’

//--------------------------------------------------------------
class Solution {
    	public int numIslands(char[][] grid) {
        	if(grid == null || grid.length == 0) return 0;

		Queue<Integer> queue = new LinkedList<>();
		int island = 0;
		int row = grid.length;
		int column = grid[0].length;
		for(int i=0; i<row; i++){
			for(int j=0; j<column; j++){
				if(grid[i][j] == '1'){
					bfs(i, j, grid, queue);
					island++;
				}
			}
		}
		return island;
    	}
	
	public void bfs(int row, int column, char[][]grid, Queue<Integer> queue){
		if(row<0 || column<0 || row>=grid.length || column>=grid[0].length || grid[row][column] == '0') return;

		int code = row * grid[0].length + column;
		queue.add(code);

		while(!queue.isEmpty()){
			code = queue.poll();
			row = code / grid[0].length;
			column = code % grid[0].length;
			
			if(grid[row][column] == '1'){
				grid[row][column] = '0';
				if(row-1>=0 && grid[row-1][column] == '1'){
					code = (row-1) * grid[0].length + column;
					queue.add(code);
				}

				if(row+1<=grid.length-1 && grid[row+1][column] == '1'){
					code = (row+1) * grid[0].length + column;
					queue.add(code);
				}

				if(column-1>=0 && grid[row][column-1] == '1'){
					code = row * grid[0].length + column-1;
					queue.add(code);
				}

				if(column+1<=grid[0].length-1 && grid[row][column+1] == '1'){
					code = row * grid[0].length + column+1;
					queue.add(code);
				}
			}
		}
	}
}
//-----------------------------------------------------------------(accept)
faster than 28.66%		less than 99.96%

利用 bfs ， 就是一圈一圈，先从 child 一层，然后 cild 二层。

这里的 code储存 很有意思： 	int code = row * grid[0].length + column;
					row = code / grid[0].length;
					column = code % grid[0].length;

如果是 4*5, 然后(3,4), 	code = 3*5 + 4 = 19

					row = 19 / 5 = 3
					column = 19 % 5 = 4

这个方法就储存了。 这里相当于是 5 进制， row 就是高一位。挺巧妙的。









class Solution {
    	public int lengthOfLongestSubstring(String s) {
      	
		Map<Character,Integer> map = new HashMap<>();
		int max_here , max_so_far;
		max_here = max_so_far = 0;
		for(int left=0, right=0; right<s.length() && left<s.length(); right++){
			if(map.containsKey(s.charAt(right))){
				left =  Math.max (left, map.get(s.charAt(right)) + 1);
			}
				
			map.put(s.charAt(right),right);
			max_here = right - left + 1;
			max_so_far = Math.max(max_here, max_so_far);
			
		}	
		return max_so_far;
	}
}
    
//------------------------(accept)
left =  Math.max (left, map.get(s.charAt(right)) + 1)  为什么还要和left 比较：
This is just to make sure we are checking in current window.
Consider the input: "abba"
for the case when i = s.length()-1.
Here, j= 2.
if you just use , map.get(s.charAt(i))+1, then j will be set to 1 and it will give wrong answer.
map.put(s.charAt(right),right) 当这里的 key 和前面重复的时候，这里会覆盖前面的 key
//--------------------------------------------------------------------------
(discussion)
public int lengthOfLongestSubstring(String s) {
        if (s.length()==0) return 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max=0;
        for (int i=0, j=0; i<s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                j = Math.max(j,map.get(s.charAt(i))+1);
            }
            map.put(s.charAt(i),i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }  